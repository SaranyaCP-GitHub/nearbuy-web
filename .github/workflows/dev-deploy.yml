name: Development Deployment

on:
  push:
    branches: [dev]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test || echo "Tests failed but continuing..."

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_VM_HOST }}
        username: ${{ secrets.DEV_VM_USERNAME }}
        key: ${{ secrets.DEV_VM_SSH_KEY }}
        port: ${{ secrets.DEV_VM_SSH_PORT }}
        script: |
          # Stop and remove existing container
          docker stop nearbuy-dev || true
          docker rm nearbuy-dev || true
          
          # Remove old image if exists
          docker rmi nearbuy-web-dev:latest || true
          
          # Build new image using production Dockerfile
          docker build -t nearbuy-web-dev:latest https://github.com/${{ github.repository }}.git#dev
          
          # Run new container
          docker run -d \
            --name nearbuy-dev \
            --restart unless-stopped \
            -p 80:80 \
            nearbuy-web-dev:latest
          
          # Wait a moment and check container status
          sleep 10
          echo "Container status:"
          docker ps
          echo "Container logs:"
          docker logs nearbuy-dev --tail 20
          
    - name: Health check
      run: |
        echo "Waiting for application to start..."
        sleep 60
        
        echo "Testing container status..."
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.DEV_VM_SSH_PORT }} ${{ secrets.DEV_VM_USERNAME }}@${{ secrets.DEV_VM_HOST }} "docker ps && docker logs nearbuy-dev --tail 10"
        
        # Test the application with multiple attempts
        for i in {1..10}; do
          echo "Health check attempt $i..."
          if curl -f -m 30 http://${{ secrets.DEV_VM_HOST }}:80; then
            echo "Health check passed!"
            exit 0
          else
            echo "Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        echo "Health check failed after 10 attempts"
        echo "Container logs:"
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.DEV_VM_SSH_PORT }} ${{ secrets.DEV_VM_USERNAME }}@${{ secrets.DEV_VM_HOST }} "docker logs nearbuy-dev"
        exit 1 